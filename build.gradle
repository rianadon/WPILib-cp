apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'eclipse'
// apply plugin: 'docker'

apply from: 'patch.gradle'

ext.jarPath = "$buildDir/sources/wpilib/wpilibj/build/libs"

// buildscript {
//     repositories { mavenCentral() }
//     dependencies {
//         classpath 'se.transmode.gradle:gradle-docker:+'
//     }
// }

sourceSets {
    main {
        java {
            srcDir 'src'
        }
    }
}

repositories {
    maven {
        url 'http://first.wpi.edu/FRC/roborio/maven/release'
    }

    ivy {
        url 'https://github.com/'
        layout 'pattern', {
            artifact '/[organisation]/[module]/archive/[revision].[ext]'
        }
    }
}

configurations {
    sources
}

dependencies {
    if (System.getProperty('os.name').toLowerCase().contains('windows')) {
        compile 'edu.wpi.first.wpilib.networktables.java:NetworkTables:+:windows2015'
    } else {
        compile 'edu.wpi.first.wpilib.networktables.java:NetworkTables:+:desktop'
    }
    // sources 'edu.wpi.first.wpilibj:athena:+'
    sources 'wpilibsuite:allwpilib:v2017.3.1@zip'
    // compile 'edu.wpi.first.wpilib:athena-runtime:+@zip'
    // compile 'edu.wpi.first.wpilibj:athena-jni:+'
    compile fileTree(dir: jarPath, include: "*.jar")
}


task extractSources(type: Copy) {
    dependsOn configurations.sources

    from {
        configurations.sources.collect { zipTree(it) }
    }
    into "$buildDir/sources"

    eachFile { file ->
        file.path = file.path.replaceFirst(/^allwpilib.*?(?:\/|\\)/, 'wpilib/')
    }

    doLast {
        def hollowDir
        new File("$buildDir/sources").eachFileMatch(~/allwpilib.*/) { hollowDir = it }
        hollowDir.deleteDir()
    }

    onlyIf { !file("$buildDir/sources/wpilib").exists() }
}

task copyPatches(type: Copy, dependsOn: extractSources) {
    from 'patch'
    into "$buildDir/sources/wpilib"
}

import java.nio.file.Paths
task patchSources() { //dependsOn: extractSources) {
    inputs.files(fileTree('patch'))

    doLast {
        inputs.files.each { f ->
            def relPath = file('patch').toURI().relativize(f.toURI()).toString()
            def basePath = Paths.get('build/sources/wpilib', relPath)
            def baseFile = file(basePath)
            if (baseFile.exists())
                patchMethods baseFile, f
            else
                copy(file:f, tofile:baseFile)
        }
    }
}

// task testBuild() {
//     testBuild()
// }

task compileWpilibJars(type:Exec, dependsOn: patchSources) {
    workingDir "$buildDir/sources/wpilib"

    if (System.getProperty('os.name').toLowerCase().contains('windows')) {
        // commandLine 'cmd', '/c', 'gradlew', ':wpilibj:jar', 'wpilibjJavadoc', 'wpilibjSources'
        commandLine 'cmd', '/c', 'gradlew', ':wpilibj:jar', 'wpilibjSources'
    } else {
        commandLine './gradlew', ':wpilibj:jar', 'wpilibjJavadoc', 'wpilibjSources'
    }

    onlyIf {
        !file("$buildDir/sources/wpilib/wpilibj/build/libs/wpilibj.jar").exists() ||
        // !file("$buildDir/sources/wpilib/wpilibj/build/libs/wpilibj-javadoc.jar").exists() ||
        !file("$buildDir/sources/wpilib/wpilibj/build/libs/wpilibj-sources.jar").exists() ||
        !copyPatches.state.upToDate
    }
}

// Note: the below works only once wpilib moves their Gradle version to 3.5.
// task compileWpilibJars(type: GradleBuild, dependsOn: copyPatches) {
//   buildFile = "$buildDir/sources/wpilib/build.gradle"
//   tasks = [':wpilibj:jar', 'wpilibjJavadoc', 'wpilibjSources']
// }

compileJava.dependsOn compileWpilibJars

extractSources.doLast {
    println 'Patching native methods in wpilib'
    new File("$buildDir/sources/wpilib/wpilibj/src/athena/java/edu/wpi/first/wpilibj/hal").eachFile { file ->
        patchFile file
    }
}

sourceCompatibility = 1.8
mainClassName = 'Main'
// applicationDefaultJvmArgs = ["-Djna.platform.library.path=/usr/local/lib", "-Djava.library.path=/usr/local/lib"]

eclipse.classpath.file.whenMerged {
    def fileReferenceFactory = new org.gradle.plugins.ide.eclipse.model.internal.FileReferenceFactory()
    def lib = entries.find { it.path.endsWith 'wpilibj.jar' }

    lib.javadocPath = fileReferenceFactory.fromPath("$jarPath/wpilibj-javadoc.jar")
    lib.sourcePath = fileReferenceFactory.fromPath("$jarPath/wpilibj-sources.jar")
}

// ------------------------------------------------------------------------------------------------
//    Failed atttempt to use Docker to compile C++ files (NI shared objects were incompatible)
// ------------------------------------------------------------------------------------------------
// distDocker {
//     // https://hub.docker.com/r/cloudcom/32bit-java/~/dockerfile/ and https://github.com/docker-library/openjdk/blob/master/8-jdk/Dockerfile
//     baseImage 'resin/armv7hf-debian'
//     setEnvironment 'JAVA_HOME', '/usr/lib/jvm/java-8-openjdk-armhf/jre'
//     setEnvironment 'JAVA_HOME_LIB', '$JAVA_HOME/lib'
//     // runCommand '[ cross-build-start ]'
//     runCommand 'echo "deb http://deb.debian.org/debian jessie-backports main" > /etc/apt/sources.list.d/jessie-backports.list'
//     runCommand 'apt-get update -yq && apt-get install -y openjdk-8-jre-headless=8u121-b13-1~bpo8+1 ca-certificates-java=20161107~bpo8+1'
//     runCommand 'update-alternatives --set java $JAVA_HOME/bin/java'
//     runCommand '/var/lib/dpkg/info/ca-certificates-java.postinst configure'

//     // baseImage 'openjdk:8'
//     addFile 'include', '/usr/local/include'
//     addFile 'lib', '/usr/local/lib'
//     setEnvironment 'LD_LIBRARY_PATH', '/usr/local/lib'

//     // runCommand 'git clone --depth=0 https://github.com/wpilibsuite/allwpilib'
//     // runCommand 'cd allwpilib && ./gradlew :wpilibc:build && cd ..'
//     // runCommand 'export LD_LIBRARY_PATH=/usr/locallib'
//     runCommand 'ldconfig'
//     // runCommand '[ cross-build-end ]'
// }

// task explodeModel(type: Copy){
//     configurations.runtime.filter { it.toString().endsWith('.zip') || it.toString().contains('jni') }.each{
//     from zipTree(it)
//   }
//   into 'build/docker'
// }

// distDocker.dependsOn explodeModel
