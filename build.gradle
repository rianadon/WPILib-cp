apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'eclipse'

apply from: 'patch.gradle'

ext.jarPath = "$buildDir/sources/wpilib/wpilibj/build/libs"

sourceSets {
    main {
        java {
            srcDir 'src'
        }
    }
}

repositories {
    maven {
        url 'http://first.wpi.edu/FRC/roborio/maven/release'
    }

    ivy {
        url 'https://github.com/'
        layout 'pattern', {
            artifact '/[organisation]/[module]/archive/[revision].[ext]'
        }
    }
}

configurations {
    sources
}

dependencies {
    if (System.getProperty('os.name').toLowerCase().contains('windows')) {
        compile 'edu.wpi.first.wpilib.networktables.java:NetworkTables:+:windows2015'
    } else {
        compile 'edu.wpi.first.wpilib.networktables.java:NetworkTables:+:desktop'
    }

    sources 'wpilibsuite:allwpilib:v2017.3.1@zip'

    compile fileTree(dir: jarPath, include: "*.jar")
}


task extractSources(type: Copy) {
    dependsOn configurations.sources

    from {
        configurations.sources.collect { zipTree(it) }
    }
    into "$buildDir/sources"

    eachFile { file ->
        file.path = file.path.replaceFirst(/^allwpilib.*?(?:\/|\\)/, 'wpilib/')
    }

    doLast {
        def hollowDir
        new File("$buildDir/sources").eachFileMatch(~/allwpilib.*/) { hollowDir = it }
        hollowDir.deleteDir()
    }

    onlyIf { !file("$buildDir/sources/wpilib").exists() }
}

import java.nio.file.Paths
task patchSources(dependsOn: extractSources) {
    inputs.files fileTree('patch')
    outputs.files fileTree("$buildDir/sources/wpilib/wpilibj/src")

    doLast {
        inputs.files.each { f ->
            def relPath = file('patch').toURI().relativize(f.toURI()).toString()
            def basePath = Paths.get('build/sources/wpilib', relPath)
            def baseFile = file(basePath)
            if (baseFile.exists())
                patchMethods baseFile, f
            else {
                file(baseFile.parent).mkdirs()
                def w = new FileWriter(baseFile.path, false)
                w.write f.text
                w.close()
            }
        }
    }
}

task compileWpilibJars(type:Exec, dependsOn: patchSources) {
    inputs.files fileTree("$buildDir/sources/wpilib/wpilibj/src")
    outputs.files fileTree(dir: "$buildDir/sources/wpilib/wpilibj/build/libs", include: "wpilibj*.jar")

    workingDir "$buildDir/sources/wpilib"

    if (System.getProperty('os.name').toLowerCase().contains('windows')) {
        commandLine 'cmd', '/c', 'gradlew', ':wpilibj:jar', 'wpilibjSources'
    } else {
        commandLine './gradlew', ':wpilibj:jar', 'wpilibjSources'
    }
}

// Note: the below works only once wpilib moves their Gradle version to 3.5.
// task compileWpilibJars(type: GradleBuild, dependsOn: copyPatches) {
//   buildFile = "$buildDir/sources/wpilib/build.gradle"
//   tasks = [':wpilibj:jar', 'wpilibjSources']
// }

compileJava.dependsOn compileWpilibJars

extractSources.doLast {
    println 'Patching native methods in wpilib'
    new File("$buildDir/sources/wpilib/wpilibj/src/athena/java/edu/wpi/first/wpilibj/hal").eachFile { file ->
        patchFile file
    }
}

sourceCompatibility = 1.8
mainClassName = 'Main'

eclipse.classpath.file.whenMerged {
    def fileReferenceFactory = new org.gradle.plugins.ide.eclipse.model.internal.FileReferenceFactory()
    def lib = entries.find { it.path.endsWith 'wpilibj.jar' }

    lib.sourcePath = fileReferenceFactory.fromPath("$jarPath/wpilibj-sources.jar")
}
